apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    k8s-app: dex
  name: dex
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: dex
  template:
    metadata:
      labels:
        k8s-app: dex
    spec:
      containers:
      - image: quay.io/joelspeed/dex:refresh-tokens-1
        name: dex
        command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]
        ports:
        - containerPort: 5556
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: /etc/dex/cfg
        - name: tls
          mountPath: /etc/dex/tls
        env:
        - name: GITHUB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: github-client
              key: client-id
        - name: GITHUB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: github-client
              key: client-secret
      serviceAccountName: dex
      volumes:
      - name: config
        configMap:
          name: dex
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        secret:
          secretName: dex
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
  namespace: kube-system
data:
  config.yaml: |
    issuer: https://192.168.99.100:32001
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
      logger:
        level: "debug"
        format: "json"
    connectors:
    - type: github
      id: github
      name: GitHub
      config:
        clientID: $GITHUB_CLIENT_ID
        clientSecret: $GITHUB_CLIENT_SECRET
        redirectURI: https://192.168.99.100:32001/callback
        org: kubernetes
    oauth2:
      responseTypes: ["code", "token", "id_token"]
      skipApprovalScreen: true
    staticClients:
    - id: kubernetes
      redirectURIs:
      - http://192.168.99.100:32000/oauth2/callback
      - http://localhost:9000/oauth2/callback
      name: 'Kubernetes'
      secret: proxy
      trustedPeers:
      - kubectl
    enablePasswordDB: true
    staticPasswords:
    - email: "admin@example.com"
      # bcrypt hash of the string "password"
      hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
      username: "admin"
      userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: dex
rules:
- apiGroups: ["dex.coreos.com"] # API group created by dex
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"] # To manage its own resources identity must be able to create customresourcedefinitions.
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex                 # Service account assigned to the dex pod.
  namespace: kube-system  # The namespace dex is running in.
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dex
  namespace: kube-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: dex
  name: dex
  namespace: kube-system
spec:
  ports:
  - name: https
    port: 5556
    protocol: TCP
    targetPort: 5556
    nodePort: 32001
  selector:
    k8s-app: dex
  type: NodePort
