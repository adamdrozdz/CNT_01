kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard-oidc
  name: kubernetes-dashboard-oidc
  namespace: kube-system
spec:
  ports:
  - name: http
    port: 9000
    protocol: TCP
    targetPort: 9000
    nodePort: 32000
  selector:
    k8s-app: kubernetes-dashboard-oidc
  type: NodePort
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: kubernetes-dashboard-minimal
  namespace: kube-system
rules:
  # Allow Dashboard to create and watch for changes of 'kubernetes-dashboard-key-holder' secret.
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  # Allow Dashboard to get, update and delete 'kubernetes-dashboard-key-holder' secret.
  resourceNames: ["kubernetes-dashboard-key-holder"]
  verbs: ["get", "update", "delete"]
  # Allow Dashboard to get metrics from heapster.
- apiGroups: [""]
  resources: ["services"]
  resourceNames: ["heapster"]
  verbs: ["proxy"]

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: kubernetes-dashboard-minimal
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubernetes-dashboard-minimal
subjects:
- kind: ServiceAccount
  name: kubernetes-dashboard
  namespace: kube-system
---
kind: Deployment
apiVersion: apps/v1beta1
metadata:
  labels:
    k8s-app: kubernetes-dashboard-oidc
  name: kubernetes-dashboard-oidc
  namespace: kube-system
spec:
  strategy:
    rollingUpdate:
      maxSurge: "50%"
      maxUnavailable: "50%"
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard-oidc
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard-oidc
    spec:
      containers:
      - name: kubernetes-dashboard
        image: gcr.io/google_containers/kubernetes-dashboard-amd64:v1.8.3
        livenessProbe:
          httpGet:
            path: /
            port: 9090
          initialDelaySeconds: 5
          timeoutSeconds: 30
        volumeMounts:
        - mountPath: /tmp
          name: tmp-volume
      - name: openresty-oidc
        image: myobplatform/openresty-oidc:1.0.3
        ports:
        - containerPort: 9000
          protocol: TCP
        env:
          - name: OIDC_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: kube-dashboard-secrets
                key: client_id
          - name: OIDC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: kube-dashboard-secrets
                key: client_secret
          - name: SESSION_SECRET
            valueFrom:
              secretKeyRef:
                name: kube-dashboard-secrets
                key: session
        volumeMounts:
          - name: openresty-conf
            mountPath: /conf
            readOnly: true
        args:
          - "-c"
          - "/conf/nginx.conf"
      volumes:
        - name: openresty-conf
          configMap:
            name: dashboard-oidc-config
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: kubernetes-dashboard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dashboard-oidc-config
  namespace: kube-system
data:
  nginx.conf: |-
    events {
      worker_connections 128;
    }
    error_log /dev/stdout debug;
    env OIDC_CLIENT_ID;
    env OIDC_CLIENT_SECRET;
    env SESSION_SECRET;
    http {
      resolver 100.64.0.10;
      lua_package_path '~/lua/?.lua;;';
      # cache for JWT verification results
      lua_shared_dict introspection 10m;
      # cache for jwks metadata documents
      lua_shared_dict discovery 1m;
      server {
        listen 9000;
        set $session_secret os.getenv("SESSION_SECRET");
        set $session_cookie_secure off; # set this to 'on' in prod!
        large_client_header_buffers 4 32k;
        location / {
          access_by_lua '
            local opts = {
              client_id = os.getenv("OIDC_CLIENT_ID"),
              client_secret = os.getenv("OIDC_CLIENT_SECRET"),
              redirect_uri_path = "/oauth2/callback",
              ssl_verify = "no",
              discovery = "https://192.168.99.100:32001/.well-known/openid-configuration",
              expiry_claim = "exp",
              scope = "email openid"
            }
            local res, err, _target, session = require("resty.openidc").authenticate(opts)
            if err or not res then
              ngx.status = 403
              ngx.say("forbidden")
              ngx.exit(ngx.HTTP_FORBIDDEN)
            end
            ngx.req.set_header("Authorization", "Bearer "..session.data.enc_id_token)
          ';
          proxy_pass http://localhost:9090;
        }
      }
    }

